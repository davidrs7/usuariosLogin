{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let VacantService = /*#__PURE__*/(() => {\n  class VacantService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.apiUrl + 'Vacant/';\n    }\n\n    stringValue(value) {\n      return value != null && value != undefined ? value.toString() : null;\n    }\n\n    getVacantFormData(vacant) {\n      var formData = new FormData();\n      formData.append(\"vacantStatusId\", this.stringValue(vacant.vacantStatusId));\n      formData.append(\"contractTypeId\", this.stringValue(vacant.contractTypeId));\n      formData.append(\"jobId\", this.stringValue(vacant.jobId));\n      formData.append(\"userId\", this.stringValue(vacant.userId));\n      formData.append(\"vacantNum\", this.stringValue(vacant.vacantNum));\n      formData.append(\"description\", this.stringValue(vacant.description));\n      return formData;\n    }\n\n    getStepFormData(stepMerge) {\n      var formData = new FormData();\n      formData.append(\"id\", stepMerge.id.toString());\n      formData.append(\"vacantId\", this.stringValue(stepMerge.vacantId));\n      formData.append(\"name\", this.stringValue(stepMerge.name));\n      formData.append(\"available\", this.stringValue(stepMerge.available));\n      formData.append(\"description\", this.stringValue(stepMerge.description));\n      formData.append(\"active\", this.stringValue(stepMerge.active));\n      formData.append(\"weight\", this.stringValue(stepMerge.weight));\n      formData.append(\"isRequired\", this.stringValue(stepMerge.isRequired));\n      formData.append(\"inserted\", stepMerge.inserted ? 'true' : 'false');\n      formData.append(\"updated\", stepMerge.updated ? 'true' : 'false');\n      return formData;\n    }\n\n    vacantListEndpoint() {\n      return this.http.get(this.baseUrl + 'Vacants');\n    }\n\n    vacantByIdEndpoint(vacantId) {\n      return this.http.get(this.baseUrl + vacantId.toString());\n    }\n\n    editVacantEndpoint(vacantEdit) {\n      var formData = this.getVacantFormData(vacantEdit);\n      formData.append(\"id\", vacantEdit.id.toString());\n      return this.http.put(this.baseUrl + 'Edit', formData);\n    }\n\n    addVacantEndpoint(vacantAdd) {\n      return this.http.post(this.baseUrl + 'Add', vacantAdd);\n    }\n\n    vacantStepsEndpoint(vacantId) {\n      return this.http.get(this.baseUrl + 'Steps/' + vacantId.toString());\n    }\n\n    vacantStepsWithValueEndpoint(vacantId, posulateId) {\n      return this.http.get(this.baseUrl + 'StepsByPostRel/' + vacantId.toString() + '/' + posulateId.toString());\n    }\n\n    vacantsByPostulateIdEndpoint(posulateId) {\n      return this.http.get(this.baseUrl + 'Postulate/' + posulateId.toString());\n    }\n\n    vacantsByPostulateRelEndpoint(vacantId) {\n      return this.http.get(this.baseUrl + 'PostulateByVacant/' + vacantId.toString());\n    }\n\n    mergeVacantStepRelEndpoint(stepMerge) {\n      var formData = this.getStepFormData(stepMerge);\n      return this.http.put(this.baseUrl + 'Step/Rel/Merge', formData);\n    }\n\n    mergeVacantStepPostulateRelEndpoint(stepMerge) {\n      var formData = this.getStepFormData(stepMerge);\n      formData.append(\"postulateId\", this.stringValue(stepMerge.postulateId));\n      formData.append(\"approved\", this.stringValue(stepMerge.approved));\n      formData.append(\"reason\", this.stringValue(stepMerge.reason));\n      return this.http.put(this.baseUrl + 'Step/Postulate/Rel/Merge', formData);\n    }\n\n    addVacantPostulateRelEndpoint(vacant) {\n      return this.http.post(this.baseUrl + 'Postulate/Add', vacant);\n    }\n\n    historicalVacantListEndpoint() {\n      return this.http.get(this.baseUrl + 'Historical/Vacants');\n    }\n\n    historicalVacantByIdEndpoint(vacantId) {\n      return this.http.get(this.baseUrl + 'Historical/' + vacantId.toString());\n    }\n\n  }\n\n  VacantService.ɵfac = function VacantService_Factory(t) {\n    return new (t || VacantService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  VacantService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: VacantService,\n    factory: VacantService.ɵfac,\n    providedIn: 'root'\n  });\n  return VacantService;\n})();","map":null,"metadata":{},"sourceType":"module"}