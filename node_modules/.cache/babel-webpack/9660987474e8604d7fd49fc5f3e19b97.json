{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let SurveyService = /*#__PURE__*/(() => {\n  class SurveyService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.apiUrl + 'Survey/';\n    }\n\n    stringValue(value) {\n      return value != null && value != undefined ? value.toString() : null;\n    }\n\n    getSurveyFormData(survey) {\n      var formData = new FormData();\n      formData.append(\"name\", this.stringValue(survey.name));\n      formData.append(\"available\", this.stringValue(survey.available));\n      formData.append(\"description\", this.stringValue(survey.description));\n      return formData;\n    }\n\n    getSurveyHeaderFormData(survey) {\n      var formData = new FormData();\n      formData.append(\"surveyId\", this.stringValue(survey.surveyId));\n      formData.append(\"title\", this.stringValue(survey.title));\n      formData.append(\"started\", this.stringValue(survey.started));\n      formData.append(\"finished\", this.stringValue(survey.finished));\n      return formData;\n    }\n\n    getSurveyFieldFormData(surveyField) {\n      var formData = new FormData();\n      formData.append(\"name\", this.stringValue(surveyField.name));\n      formData.append(\"available\", this.stringValue(surveyField.available));\n      formData.append(\"fieldType\", this.stringValue(surveyField.fieldType));\n      formData.append(\"isRequired\", this.stringValue(surveyField.isRequired));\n      formData.append(\"config\", this.stringValue(surveyField.config));\n      return formData;\n    }\n\n    getSurveyFieldRelFormData(surveyFieldMerge) {\n      var formData = this.getSurveyFieldFormData(surveyFieldMerge);\n      formData.append(\"id\", surveyFieldMerge.id.toString());\n      formData.append(\"surveyId\", this.stringValue(surveyFieldMerge.surveyId));\n      formData.append(\"active\", this.stringValue(surveyFieldMerge.active));\n      formData.append(\"weight\", this.stringValue(surveyFieldMerge.weight));\n      formData.append(\"config\", this.stringValue(surveyFieldMerge.config));\n      formData.append(\"inserted\", surveyFieldMerge.inserted ? 'true' : 'false');\n      formData.append(\"updated\", surveyFieldMerge.updated ? 'true' : 'false');\n      return formData;\n    }\n\n    surveyListEndpoint() {\n      return this.http.get(this.baseUrl + 'Surveys');\n    }\n\n    surveyListBySurveyEndpoint(surveyId) {\n      return this.http.get(this.baseUrl + 'Surveys/Header/Survey/' + surveyId);\n    }\n\n    surveyListByUserEndpoint(userId) {\n      return this.http.get(this.baseUrl + 'Surveys/Header/User/' + userId);\n    }\n\n    surveyEndpoint(surveyId) {\n      return this.http.get(this.baseUrl + surveyId);\n    }\n\n    surveyByUserEndpoint(userId, surveyId) {\n      return this.http.get(this.baseUrl + 'Surveys/Header/' + surveyId + '/' + userId);\n    }\n\n    editSurveyEndpoint(surveyEdit) {\n      var formData = this.getSurveyFormData(surveyEdit);\n      formData.append(\"id\", surveyEdit.id.toString());\n      return this.http.put(this.baseUrl + 'Edit', formData);\n    }\n\n    addSurveyEndpoint(surveyAdd) {\n      return this.http.post(this.baseUrl + 'Add', surveyAdd);\n    }\n\n    editSurveyHeaderEndpoint(surveyEdit) {\n      var formData = this.getSurveyHeaderFormData(surveyEdit);\n      formData.append(\"id\", surveyEdit.id.toString());\n      return this.http.put(this.baseUrl + 'Header/Edit', formData);\n    }\n\n    addSurveyHeaderEndpoint(surveyAdd) {\n      return this.http.post(this.baseUrl + 'Header/Add', surveyAdd);\n    }\n\n    surveyFieldsEndpoint() {\n      return this.http.get(this.baseUrl + 'Fields');\n    }\n\n    surveyFieldByIdEndpoint(fieldId) {\n      return this.http.get(this.baseUrl + 'Fields/' + fieldId);\n    }\n\n    surveyFieldBySurveyEndpoint(surveyId) {\n      return this.http.get(this.baseUrl + 'FieldsBySurvey/' + surveyId);\n    }\n\n    surveyFieldBySurveyHeaderEndpoint(surveyHeaderId) {\n      return this.http.get(this.baseUrl + 'FieldsBySurvey/Header/' + surveyHeaderId);\n    }\n\n    editSurveyFieldEndpoint(surveyFieldEdit) {\n      var formData = this.getSurveyFieldFormData(surveyFieldEdit);\n      formData.append(\"id\", surveyFieldEdit.id.toString());\n      return this.http.put(this.baseUrl + 'Fields/Edit', formData);\n    }\n\n    addSurveyFieldEndpoint(surveyFieldAdd) {\n      return this.http.post(this.baseUrl + 'Fields/Add', surveyFieldAdd);\n    }\n\n    mergeSurveyFieldRelEndpoint(surveyFieldMerge) {\n      var formData = this.getSurveyFieldRelFormData(surveyFieldMerge);\n      return this.http.put(this.baseUrl + 'Field/Rel/Merge', formData);\n    }\n\n    surveyUsersByHeaderEndpoint(headerId) {\n      return this.http.get(this.baseUrl + 'Users/' + headerId);\n    }\n\n    addSurveyUserRelEndpoint(surveyUserRel) {\n      return this.http.post(this.baseUrl + 'Users/Rel/Add', surveyUserRel);\n    }\n\n    addSurveyUserRelByDepartmentEndpoint(surveyUserRel) {\n      return this.http.post(this.baseUrl + 'Users/Rel/Add/Department', surveyUserRel);\n    }\n\n    addSurveyUserRelByJobEndpoint(surveyUserRel) {\n      return this.http.post(this.baseUrl + 'Users/Rel/Add/Job', surveyUserRel);\n    }\n\n    addSurveyUserRelByCityEndpoint(surveyUserRel) {\n      return this.http.post(this.baseUrl + 'Users/Rel/Add/City', surveyUserRel);\n    }\n\n    deleteSurveyUserRelEndpoint(surveyUserRel) {\n      return this.http.post(this.baseUrl + 'Users/Rel/Delete', surveyUserRel);\n    }\n\n  }\n\n  SurveyService.ɵfac = function SurveyService_Factory(t) {\n    return new (t || SurveyService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  SurveyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SurveyService,\n    factory: SurveyService.ɵfac,\n    providedIn: 'root'\n  });\n  return SurveyService;\n})();","map":null,"metadata":{},"sourceType":"module"}