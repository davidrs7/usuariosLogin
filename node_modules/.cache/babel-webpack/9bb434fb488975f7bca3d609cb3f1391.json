{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let StepService = /*#__PURE__*/(() => {\n  class StepService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.apiUrl + 'Step/';\n    }\n\n    stringValue(value) {\n      return value != null && value != undefined ? value.toString() : null;\n    }\n\n    getStepFormData(step) {\n      var formData = new FormData();\n      formData.append(\"name\", this.stringValue(step.name));\n      formData.append(\"available\", this.stringValue(step.available));\n      formData.append(\"description\", this.stringValue(step.description));\n      return formData;\n    }\n\n    getStepFieldFormData(stepField) {\n      var formData = new FormData();\n      formData.append(\"name\", this.stringValue(stepField.name));\n      formData.append(\"available\", this.stringValue(stepField.available));\n      formData.append(\"fieldType\", this.stringValue(stepField.fieldType));\n      formData.append(\"isRequired\", this.stringValue(stepField.isRequired));\n      formData.append(\"config\", this.stringValue(stepField.config));\n      return formData;\n    }\n\n    getStepFieldRelFormData(stepFieldMerge) {\n      var formData = this.getStepFieldFormData(stepFieldMerge);\n      formData.append(\"id\", stepFieldMerge.id.toString());\n      formData.append(\"stepId\", this.stringValue(stepFieldMerge.stepId));\n      formData.append(\"active\", this.stringValue(stepFieldMerge.active));\n      formData.append(\"weight\", this.stringValue(stepFieldMerge.weight));\n      formData.append(\"config\", this.stringValue(stepFieldMerge.config));\n      formData.append(\"inserted\", stepFieldMerge.inserted ? 'true' : 'false');\n      formData.append(\"updated\", stepFieldMerge.updated ? 'true' : 'false');\n      return formData;\n    }\n\n    stepListEndpoint() {\n      return this.http.get(this.baseUrl + 'Steps');\n    }\n\n    stepEndpoint(stepId) {\n      return this.http.get(this.baseUrl + stepId);\n    }\n\n    stepFieldEndpoint() {\n      return this.http.get(this.baseUrl + 'Fields');\n    }\n\n    stepFieldByIdEndpoint(fieldId) {\n      return this.http.get(this.baseUrl + 'Fields/' + fieldId);\n    }\n\n    stepFieldByStepEndpoint(stepId) {\n      return this.http.get(this.baseUrl + 'FieldsByStep/' + stepId);\n    }\n\n    stepFieldByStepWithValueEndpoint(stepId, vacantId, postulateId) {\n      return this.http.get(this.baseUrl + 'FieldsByStepRel/' + stepId + '/' + vacantId + '/' + postulateId);\n    }\n\n    editStepEndpoint(stepEdit) {\n      var formData = this.getStepFormData(stepEdit);\n      formData.append(\"id\", stepEdit.id.toString());\n      return this.http.put(this.baseUrl + 'Edit', formData);\n    }\n\n    addStepEndpoint(stepAdd) {\n      return this.http.post(this.baseUrl + 'Add', stepAdd);\n    }\n\n    editStepFieldEndpoint(stepFieldEdit) {\n      var formData = this.getStepFieldFormData(stepFieldEdit);\n      formData.append(\"id\", stepFieldEdit.id.toString());\n      return this.http.put(this.baseUrl + 'Field/Edit', formData);\n    }\n\n    addStepFieldEndpoint(stepFieldAdd) {\n      return this.http.post(this.baseUrl + 'Field/Add', stepFieldAdd);\n    }\n\n    mergeStepFieldRelEndpoint(stepFieldMerge) {\n      var formData = this.getStepFieldRelFormData(stepFieldMerge);\n      return this.http.put(this.baseUrl + 'Field/Rel/Merge', formData);\n    }\n\n    mergeStepFieldPostulateRelEndpoint(stepFieldMerge) {\n      var formData = this.getStepFieldRelFormData(stepFieldMerge);\n      formData.append(\"fieldValue\", this.stringValue(stepFieldMerge.fieldValue));\n      formData.append(\"postulateId\", this.stringValue(stepFieldMerge.postulateId));\n      formData.append(\"vacantId\", this.stringValue(stepFieldMerge.vacantId));\n      return this.http.put(this.baseUrl + 'Field/Postulate/Rel/Merge', formData);\n    }\n\n  }\n\n  StepService.ɵfac = function StepService_Factory(t) {\n    return new (t || StepService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  StepService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StepService,\n    factory: StepService.ɵfac,\n    providedIn: 'root'\n  });\n  return StepService;\n})();","map":null,"metadata":{},"sourceType":"module"}