{"ast":null,"code":"import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nexport class AdminMsgErrors {\n  getErrors(formControl) {\n    var errors = [];\n    if (formControl != null && formControl.errors != null) for (var index in formControl.errors) if (formControl.errors[index]) switch (index) {\n      case 'required':\n        errors.push('Campo requerido.');\n        break;\n\n      case 'pattern':\n        errors.push('Campo con formato no válido.');\n        break;\n\n      case 'email':\n        errors.push('Debe ser un correo electrónico.');\n        break;\n\n      case 'min':\n        if (formControl.errors[index].min >= 10000) errors.push('El número está fuera de rango.');else errors.push('Debe ser mayor o igual a ' + formControl.errors[index].min + '.');\n        break;\n\n      case 'max':\n        if (formControl.errors[index].max >= 10000) errors.push('El número está fuera de rango.');else errors.push('Debe ser menor o igual a ' + formControl.errors[index].max + '.');\n        break;\n\n      default:\n        errors.push('Error inesperado.');\n        console.log(index);\n    }\n    return errors;\n  }\n\n  validate(formControl) {\n    return formControl != null && formControl.invalid && (formControl.dirty || formControl.touched);\n  }\n\n  mapping(object, formGroup) {\n    if (formGroup != null && formGroup.value != null) for (var item in formGroup.value) if (object[item] != undefined) object[item] = formGroup.value[item] == null || formGroup.value[item] == 'NaN-NaN-NaN' ? '' : formGroup.value[item];\n    return object;\n  }\n\n  transformObjectToValidSetter(object) {\n    Object.keys(object).forEach(key => {\n      if (object[key] == null) object[key] = '';\n    });\n    return object;\n  }\n\n  formatDate(dateValue) {\n    var date;\n    if (typeof dateValue == 'string' && dateValue == '') return '';\n    if (dateValue == null || dateValue == undefined) return '';\n    date = new Date(dateValue);\n    if (date.getFullYear() < 1800) return '';\n    var dateString = date.getFullYear() + '-';\n    var month = date.getMonth() + 1;\n    if (month < 10) dateString += '0';\n    dateString += month + '-';\n    if (date.getDate() < 10) dateString += '0';\n    dateString += date.getDate();\n    return dateString;\n  }\n\n}\nexport class AdminExtraForms {\n  getStepFieldConfig(stepField) {\n    return this.getFieldConfig(stepField);\n  }\n\n  getSurveyFieldConfig(surveyField) {\n    return this.getFieldConfig(surveyField);\n  }\n\n  createStepFormConfigBase(step, fields, vacantId) {\n    var configIndex = {\n      step: step,\n      fields: fields,\n      fieldsForm: [],\n      vacantId: vacantId,\n      formGroup: new FormGroup({}),\n      status: 'warning'\n    };\n\n    if (fields != null && fields != undefined && fields.length > 0) {\n      var index = 0;\n\n      for (let field of fields) {\n        var fieldForm = {\n          fieldId: field.id,\n          fieldName: 'field' + field.id,\n          fieldType: field.fieldType,\n          fieldValue: field.fieldValue,\n          name: field.name,\n          isRequired: field.isRequired,\n          index: index,\n          active: field.active == 1,\n          weight: field.weight,\n          config: this.getStepFieldConfig(field)\n        };\n        configIndex.fieldsForm.push(fieldForm);\n\n        if (field.fieldValue != null && field.fieldValue != '') {\n          configIndex.status = 'danger';\n          field.updated = true;\n        }\n\n        index++;\n      }\n\n      configIndex.formGroup = this.createFormGroupByFields(configIndex.fieldsForm);\n    }\n\n    return configIndex;\n  }\n\n  createSurveyFormConfigBase(fields) {\n    var fieldsForm = [];\n\n    if (fields != null && fields != undefined && fields.length > 0) {\n      var index = 0;\n\n      for (let field of fields) {\n        var fieldForm = {\n          fieldId: field.id,\n          fieldName: 'field' + field.id,\n          fieldType: field.fieldType,\n          fieldValue: field.fieldValue,\n          name: field.name,\n          isRequired: field.isRequired,\n          index: index,\n          active: field.active == 1,\n          weight: field.weight,\n          config: this.getSurveyFieldConfig(field)\n        };\n        fieldsForm.push(fieldForm);\n      }\n    }\n\n    return fieldsForm;\n  }\n\n  createFormGroupByFields(fields) {\n    var formGroup = new FormGroup({});\n\n    for (let field of fields) {\n      var formControl = new FormControl(field.fieldValue);\n      if (field.isRequired) formControl.addValidators(Validators.required);\n      if (field.fieldType == 'number') formControl.addValidators(Validators.pattern('^[0-9]*$'));\n\n      if (field.config != null && field.config.length > 0) {\n        for (let configField of field.config) {\n          switch (configField.name) {\n            case 'min':\n              formControl.addValidators(Validators.min(configField.value));\n              break;\n\n            case 'max':\n              formControl.addValidators(Validators.max(configField.value));\n              break;\n          }\n        }\n      }\n\n      formGroup.addControl(field.fieldName, formControl);\n    }\n\n    return formGroup;\n  }\n\n  getTitleByName(name) {\n    switch (name) {\n      case 'min':\n        return 'Mínimo';\n\n      case 'max':\n        return 'Máximo';\n\n      case 'options':\n        return 'Lista de opciones';\n\n      default:\n        return name;\n    }\n  }\n\n  getFieldConfig(stepField) {\n    var configIndex = [];\n\n    if (stepField.config != null && stepField.config != '') {\n      var items = stepField.config.split('|');\n\n      for (var i = 0; i < items.length; i++) {\n        var set = items[i].split(':');\n        var obj = {\n          name: set[0],\n          title: this.getTitleByName(set[0]),\n          value: set[1]\n        };\n        var list = set[1].split(',');\n\n        if (list.length > 1 || stepField.fieldType == 'list') {\n          obj.list = list;\n        }\n\n        configIndex.push(obj);\n      }\n    }\n\n    return configIndex;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}