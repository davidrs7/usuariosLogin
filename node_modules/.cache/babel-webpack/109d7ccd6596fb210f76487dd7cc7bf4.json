{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let EmployeeService = /*#__PURE__*/(() => {\n  class EmployeeService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.apiUrl + 'Employee/';\n    }\n\n    stringValue(value) {\n      return value != null && value != undefined ? value.toString() : null;\n    }\n\n    getGenericFormData(employee) {\n      var formData = new FormData();\n      formData.append(\"jobId\", this.stringValue(employee.jobId));\n      formData.append(\"statusId\", this.stringValue(employee.statusId));\n      formData.append(\"docTypeId\", this.stringValue(employee.docTypeId));\n      formData.append(\"contractTypeId\", this.stringValue(employee.contractTypeId));\n      formData.append(\"hasVaccine\", this.stringValue(employee.hasVaccine));\n      formData.append(\"vaccineDose\", this.stringValue(employee.vaccineDose));\n      formData.append(\"hasVaccineBooster\", this.stringValue(employee.hasVaccineBooster));\n      formData.append(\"doc\", this.stringValue(employee.doc));\n      formData.append(\"name\", this.stringValue(employee.name));\n      formData.append(\"sex\", this.stringValue(employee.sex));\n      formData.append(\"rh\", this.stringValue(employee.rh));\n      formData.append(\"corpCellPhone\", this.stringValue(employee.corpCellPhone));\n      formData.append(\"cellPhone\", this.stringValue(employee.cellPhone));\n      formData.append(\"phone\", this.stringValue(employee.phone));\n      formData.append(\"email\", this.stringValue(employee.email));\n      formData.append(\"bankAccount\", this.stringValue(employee.bankAccount));\n      formData.append(\"bankAccountType\", this.stringValue(employee.bankAccountType));\n      formData.append(\"vaccineMaker\", this.stringValue(employee.vaccineMaker));\n      if (employee.maritalStatusId != null) formData.append(\"maritalStatusId\", this.stringValue(employee.maritalStatusId));\n      if (employee.docIssueCityId != null) formData.append(\"docIssueCityId\", this.stringValue(employee.docIssueCityId));\n      if (employee.jobCityId != null) formData.append(\"jobCityId\", this.stringValue(employee.jobCityId));\n      if (employee.bankingEntityId != null) formData.append(\"bankingEntityId\", this.stringValue(employee.bankingEntityId));\n      if (employee.birthDate != null) formData.append(\"birthDate\", this.stringValue(employee.birthDate));\n      if (employee.employmentDate != null) formData.append(\"employmentDate\", this.stringValue(employee.employmentDate));\n      if (employee.docIssueDate != null) formData.append(\"docIssueDate\", this.stringValue(employee.docIssueDate));\n\n      if (employee.photo != null) {\n        const fileToUpload = employee.photo;\n        formData.append(\"photo\", fileToUpload, employee.doc);\n      }\n\n      return formData;\n    }\n\n    getGenericFormDataGeneral(employeeGeneral) {\n      var formData = new FormData();\n      formData.append(\"cityId\", this.stringValue(employeeGeneral.cityId));\n      formData.append(\"housingTypeId\", this.stringValue(employeeGeneral.housingTypeId));\n      formData.append(\"dependents\", this.stringValue(employeeGeneral.dependents));\n      formData.append(\"dependentsUnder9\", this.stringValue(employeeGeneral.dependentsUnder9));\n      formData.append(\"housingTime\", this.stringValue(employeeGeneral.housingTime));\n      formData.append(\"socioeconomicStatus\", this.stringValue(employeeGeneral.socioeconomicStatus));\n      formData.append(\"transportationId\", this.stringValue(employeeGeneral.transportationId));\n      formData.append(\"employeeId\", this.stringValue(employeeGeneral.employeeId));\n      formData.append(\"emergencyContactName\", this.stringValue(employeeGeneral.emergencyContactName));\n      formData.append(\"emergencyContactPhone\", this.stringValue(employeeGeneral.emergencyContactPhone));\n      formData.append(\"emergencyContactRelationship\", this.stringValue(employeeGeneral.emergencyContactRelationship));\n      formData.append(\"address\", this.stringValue(employeeGeneral.address));\n      formData.append(\"neighborhood\", this.stringValue(employeeGeneral.neighborhood));\n      formData.append(\"eps\", this.stringValue(employeeGeneral.eps));\n      formData.append(\"arl\", this.stringValue(employeeGeneral.arl));\n      formData.append(\"afp\", this.stringValue(employeeGeneral.afp));\n      formData.append(\"recommendedBy\", this.stringValue(employeeGeneral.recommendedBy));\n      formData.append(\"description\", this.stringValue(employeeGeneral.description));\n      formData.append(\"licensePlate\", this.stringValue(employeeGeneral.licensePlate));\n      formData.append(\"vehicleMark\", this.stringValue(employeeGeneral.vehicleMark));\n      formData.append(\"vehicleModel\", this.stringValue(employeeGeneral.vehicleModel));\n      formData.append(\"licenseNumber\", this.stringValue(employeeGeneral.licenseNumber));\n      formData.append(\"licenseCategory\", this.stringValue(employeeGeneral.licenseCategory));\n      formData.append(\"vehicleOwnerName\", this.stringValue(employeeGeneral.vehicleOwnerName));\n      formData.append(\"contributorType\", this.stringValue(employeeGeneral.contributorType));\n      if (employeeGeneral.dependentBirthDate != null) formData.append(\"dependentBirthDate\", this.stringValue(employeeGeneral.dependentBirthDate));\n      if (employeeGeneral.licenseValidity != null) formData.append(\"licenseValidity\", this.stringValue(employeeGeneral.licenseValidity));\n      if (employeeGeneral.rtmExpirationDate != null) formData.append(\"rtmExpirationDate\", this.stringValue(employeeGeneral.rtmExpirationDate));\n      if (employeeGeneral.soatExpirationDate != null) formData.append(\"soatExpirationDate\", this.stringValue(employeeGeneral.soatExpirationDate));\n      return formData;\n    }\n\n    getGenericFormDataAcademic(employeeAcademic) {\n      var formData = new FormData();\n      formData.append(\"educationalLevelId\", this.stringValue(employeeAcademic.educationalLevelId));\n      formData.append(\"employeeId\", this.stringValue(employeeAcademic.employeeId));\n      formData.append(\"career\", this.stringValue(employeeAcademic.career));\n      return formData;\n    }\n\n    getGenericFormDataCriteria(employeeCriteria) {\n      var formData = new FormData();\n      formData.append(\"departmentId\", this.stringValue(employeeCriteria.departmentId));\n      formData.append(\"name\", this.stringValue(employeeCriteria.name));\n      formData.append(\"doc\", this.stringValue(employeeCriteria.doc));\n      formData.append(\"page\", this.stringValue(employeeCriteria.page));\n      formData.append(\"activePaginator\", employeeCriteria.activePaginator ? 'true' : 'false');\n      return formData;\n    }\n\n    employeesEndpoint(employeeCriteria) {\n      var formData = this.getGenericFormDataCriteria(employeeCriteria);\n      return this.http.post(this.baseUrl + 'Employees/Criteria', formData);\n    }\n\n    employeesDownloadEndpoint(employeeCriteria) {\n      var formData = this.getGenericFormDataCriteria(employeeCriteria);\n      return this.http.post(this.baseUrl + 'Employees/Download', formData);\n    }\n\n    employeesWithoutPagesEndpoint(excludeEmployeeId) {\n      if (excludeEmployeeId == null) excludeEmployeeId = 0;\n      return this.http.get(this.baseUrl + 'EmployeesWithoutPages/' + excludeEmployeeId);\n    }\n\n    employeeEndpoint(employeeId) {\n      return this.http.get(this.baseUrl + employeeId.toString());\n    }\n\n    employeeGeneralEndpoint(employeeId) {\n      return this.http.get(this.baseUrl + 'EmpGeneral/' + employeeId.toString());\n    }\n\n    employeeAcademicEndpoint(employeeId) {\n      return this.http.get(this.baseUrl + 'Academic/' + employeeId.toString());\n    }\n\n    editEndpoint(employeeEdit) {\n      var formData = this.getGenericFormData(employeeEdit);\n      formData.append(\"id\", employeeEdit.id.toString());\n      return this.http.put(this.baseUrl + 'Edit', formData);\n    }\n\n    addEndpoint(employeeAdd) {\n      var formData = this.getGenericFormData(employeeAdd);\n      return this.http.post(this.baseUrl + 'Add', formData);\n    }\n\n    editGeneralEndpoint(employeeGeneralEdit) {\n      var formData = this.getGenericFormDataGeneral(employeeGeneralEdit);\n      formData.append(\"id\", employeeGeneralEdit.id.toString());\n      return this.http.put(this.baseUrl + 'Edit/General', formData);\n    }\n\n    addGeneralEndpoint(employeeGeneralAdd) {\n      var formData = this.getGenericFormDataGeneral(employeeGeneralAdd);\n      return this.http.post(this.baseUrl + 'Add/General', formData);\n    }\n\n    editAcademicEndpoint(employeeAcademicEdit) {\n      var formData = this.getGenericFormDataAcademic(employeeAcademicEdit);\n      formData.append(\"id\", employeeAcademicEdit.id.toString());\n      return this.http.put(this.baseUrl + 'Edit/Academic', formData);\n    }\n\n    addAcademicEndpoint(employeeAcademicAdd) {\n      var formData = this.getGenericFormDataAcademic(employeeAcademicAdd);\n      return this.http.post(this.baseUrl + 'Add/Academic', formData);\n    }\n\n    addFileEndpoint(employeeFile, document) {\n      var formData = new FormData();\n      formData.append(\"employeeId\", employeeFile.employeeId.toString());\n      formData.append(\"department\", employeeFile.department);\n      formData.append(\"city\", employeeFile.city);\n      formData.append(\"level1\", employeeFile.level1);\n      formData.append(\"level2\", employeeFile.level2);\n      formData.append(\"level3\", employeeFile.level3);\n      formData.append(\"name\", employeeFile.name);\n      if (document != undefined) formData.append(\"document\", document);\n      return this.http.post(this.baseUrl + 'Add/File', formData);\n    }\n\n    addKnowledgeEndpoint(employeeKnowledge) {\n      var formData = new FormData();\n      formData.append(\"employeeId\", employeeKnowledge.employeeId.toString());\n      formData.append(\"knowledgeId\", employeeKnowledge.knowledgeId.toString());\n      formData.append(\"active\", employeeKnowledge.active ? 'true' : 'false');\n      formData.append(\"rate\", employeeKnowledge.rate.toString());\n      formData.append(\"inserted\", employeeKnowledge.inserted ? 'true' : 'false');\n      formData.append(\"updated\", employeeKnowledge.updated ? 'true' : 'false');\n      return this.http.post(this.baseUrl + 'Add/EmpKnowledge', formData);\n    }\n\n    addSkillEndpoint(employeeSkill) {\n      var formData = new FormData();\n      formData.append(\"employeeId\", employeeSkill.employeeId.toString());\n      formData.append(\"skillId\", employeeSkill.skillId.toString());\n      formData.append(\"active\", employeeSkill.active ? 'true' : 'false');\n      formData.append(\"rate\", employeeSkill.rate.toString());\n      formData.append(\"inserted\", employeeSkill.inserted ? 'true' : 'false');\n      formData.append(\"updated\", employeeSkill.updated ? 'true' : 'false');\n      return this.http.post(this.baseUrl + 'Add/EmpSkill', formData);\n    }\n\n    updateSonDataEndPoint(sonData) {\n      var formData = new FormData();\n      formData.append(\"id\", sonData.id.toString());\n      formData.append(\"sonName\", sonData.sonName.toString());\n      formData.append(\"sonBornDate\", sonData.sonBornDate.toString());\n      formData.append(\"EmployeeGeneralId\", sonData.employeeGeneralId.toString());\n      console.log(\"************\");\n      console.log(formData);\n      return this.http.post(this.baseUrl + 'Add/EmpSon', formData);\n    }\n\n    deleteSonEndPoint(sonId) {\n      var formData = new FormData();\n      formData.append(\"id\", sonId.toString());\n      return this.http.post(this.baseUrl + 'Del/EmpSon', formData);\n    }\n\n    skillsEndpoint(employeeId) {\n      return this.http.get(this.baseUrl + 'Skills/' + employeeId);\n    }\n\n    skillsNewEndpoint() {\n      return this.http.get(this.baseUrl + 'Skills');\n    }\n\n    knowledgesEndpoint(employeeId) {\n      return this.http.get(this.baseUrl + 'Knowledges/' + employeeId);\n    }\n\n    knowledgesNewEndpoint() {\n      return this.http.get(this.baseUrl + 'Knowledges');\n    }\n    /** retrive Sons data */\n\n\n    sonsEndpoint(employeeId) {\n      return this.http.get(this.baseUrl + 'Sons/' + employeeId);\n    }\n\n    fileTypesEndpoint() {\n      return this.http.get(this.baseUrl + 'FileTypes');\n    }\n\n    filesEndpoint(employeeId) {\n      return this.http.get(this.baseUrl + 'Files/' + employeeId);\n    }\n\n  }\n\n  EmployeeService.ɵfac = function EmployeeService_Factory(t) {\n    return new (t || EmployeeService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  EmployeeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EmployeeService,\n    factory: EmployeeService.ɵfac,\n    providedIn: 'root'\n  });\n  return EmployeeService;\n})();","map":null,"metadata":{},"sourceType":"module"}