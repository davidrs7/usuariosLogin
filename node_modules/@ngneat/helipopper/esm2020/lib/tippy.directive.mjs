import { Directive, EventEmitter, Inject, Injector, Input, Output, PLATFORM_ID } from '@angular/core';
import { isPlatformServer } from '@angular/common';
import tippy from 'tippy.js';
import { fromEvent, merge, Subject } from 'rxjs';
import { filter, switchMap, takeUntil } from 'rxjs/operators';
import { isComponent, isString, isTemplateRef } from '@ngneat/overview';
import { coerceCssPixelValue, dimensionsChanges, inView, normalizeClassName, onlyTippyProps, overflowChanges } from './utils';
import { TIPPY_CONFIG, TIPPY_REF } from './tippy.types';
import * as i0 from "@angular/core";
import * as i1 from "@ngneat/overview";
export class TippyDirective {
    constructor(platformId, globalConfig, injector, viewService, vcr, zone, hostRef) {
        this.platformId = platformId;
        this.globalConfig = globalConfig;
        this.injector = injector;
        this.viewService = viewService;
        this.vcr = vcr;
        this.zone = zone;
        this.hostRef = hostRef;
        this.onlyTextOverflow = false;
        this.useHostWidth = false;
        this.hideOnEscape = false;
        this.detectChangesComponent = true;
        this.visible = new EventEmitter();
        this.isVisible = false;
        this.destroyed = new Subject();
        this.enabled = true;
        this.variationDefined = false;
        /**
         * We had use `visible` event emitter previously as a `takeUntil` subscriber in multiple places
         * within the directive.
         * This is for internal use only; thus we don't have to deal with the `visible` event emitter
         * and trigger change detections only when the `visible` event is being listened outside
         * in the template (`<button [tippy]="..." (visible)="..."></button>`).
         */
        this.visibleInternal = new Subject();
    }
    ngOnChanges(changes) {
        if (isPlatformServer(this.platformId))
            return;
        let props = Object.keys(changes).reduce((acc, change) => {
            if (change === 'isVisible')
                return acc;
            acc[change] = changes[change].currentValue;
            return acc;
        }, {});
        let variation;
        if (isChanged('variation', changes)) {
            variation = changes.variation.currentValue;
            this.variationDefined = true;
        }
        else if (!this.variationDefined) {
            variation = this.globalConfig.defaultVariation;
            this.variationDefined = true;
        }
        if (variation) {
            props = {
                ...this.globalConfig.variations[variation],
                ...props
            };
        }
        if (isChanged('isEnabled', changes)) {
            this.enabled = changes.isEnabled.currentValue;
            this.setStatus();
        }
        if (isChanged('isVisible', changes)) {
            this.isVisible ? this.show() : this.hide();
        }
        this.setProps({ ...this.props, ...props });
    }
    ngOnInit() {
        if (this.useHostWidth) {
            this.props.maxWidth = this.hostWidth;
        }
    }
    ngAfterViewInit() {
        if (isPlatformServer(this.platformId))
            return;
        this.zone.runOutsideAngular(() => {
            if (this.lazy) {
                if (this.onlyTextOverflow) {
                    inView(this.host)
                        .pipe(switchMap(() => overflowChanges(this.host)), takeUntil(this.destroyed))
                        .subscribe(isElementOverflow => {
                        this.checkOverflow(isElementOverflow);
                    });
                }
                else {
                    inView(this.host)
                        .pipe(takeUntil(this.destroyed))
                        .subscribe(() => {
                        this.createInstance();
                    });
                }
            }
            else if (this.onlyTextOverflow) {
                overflowChanges(this.host)
                    .pipe(takeUntil(this.destroyed))
                    .subscribe(isElementOverflow => {
                    this.checkOverflow(isElementOverflow);
                });
            }
            else {
                this.createInstance();
            }
        });
    }
    ngOnDestroy() {
        this.destroyed.next();
        this.instance?.destroy();
        this.destroyView();
    }
    destroyView() {
        this.viewOptions$ = null;
        this.viewRef?.destroy();
        this.viewRef = null;
    }
    show() {
        this.instance?.show();
    }
    hide() {
        this.instance?.hide();
    }
    enable() {
        this.instance?.enable();
    }
    disable() {
        this.instance?.disable();
    }
    setProps(props) {
        this.props = props;
        this.instance?.setProps(onlyTippyProps(props));
    }
    setStatus() {
        this.enabled ? this.instance?.enable() : this.instance?.disable();
    }
    get host() {
        return this.customHost || this.hostRef.nativeElement;
    }
    get hostWidth() {
        return this.host.getBoundingClientRect().width;
    }
    createInstance() {
        if (!this.content && !coerceBooleanInput(this.useTextContent)) {
            return;
        }
        this.zone.runOutsideAngular(() => {
            this.instance = tippy(this.host, {
                allowHTML: true,
                appendTo: document.body,
                ...onlyTippyProps(this.globalConfig),
                ...onlyTippyProps(this.props),
                onMount: instance => {
                    this.isVisible = true;
                    this.visibleInternal.next(this.isVisible);
                    if (this.visible.observed) {
                        this.zone.run(() => this.visible.next(this.isVisible));
                    }
                    this.useHostWidth && this.listenToHostResize();
                    this.globalConfig.onMount?.(instance);
                },
                onCreate: instance => {
                    instance.popper.classList.add(`tippy-variation-${this.variation || this.globalConfig.defaultVariation}`);
                    if (this.className) {
                        for (const klass of normalizeClassName(this.className)) {
                            instance.popper.classList.add(klass);
                        }
                    }
                    this.globalConfig.onCreate?.(instance);
                    if (this.isVisible === true) {
                        instance.show();
                    }
                },
                onShow: instance => {
                    instance.reference.setAttribute('data-tippy-open', '');
                    this.zone.run(() => {
                        const content = this.resolveContent(instance);
                        if (isString(content)) {
                            instance.setProps({ allowHTML: false });
                            if (!content?.trim()) {
                                this.disable();
                            }
                            else {
                                this.enable();
                            }
                        }
                        instance.setContent(content);
                        this.hideOnEscape && this.handleEscapeButton();
                    });
                    if (this.useHostWidth) {
                        this.setInstanceWidth(instance, this.hostWidth);
                    }
                    else if (this.popperWidth) {
                        this.setInstanceWidth(instance, this.popperWidth);
                    }
                    this.globalConfig.onShow?.(instance);
                },
                onHide(instance) {
                    instance.reference.removeAttribute('data-tippy-open');
                },
                onHidden: instance => {
                    this.destroyView();
                    this.isVisible = false;
                    this.visibleInternal.next(this.isVisible);
                    if (this.visible.observed) {
                        this.zone.run(() => this.visible.next(this.isVisible));
                    }
                    this.globalConfig.onHidden?.(instance);
                }
            });
            this.setStatus();
            this.setProps(this.props);
            this.variation === 'contextMenu' && this.handleContextMenu();
        });
    }
    resolveContent(instance) {
        if (!this.viewOptions$ && !isString(this.content)) {
            if (isComponent(this.content)) {
                this.instance.data = this.data;
                this.viewOptions$ = {
                    injector: Injector.create({
                        providers: [
                            {
                                provide: TIPPY_REF,
                                useValue: this.instance
                            }
                        ],
                        parent: this.injector
                    })
                };
            }
            else if (isTemplateRef(this.content)) {
                this.viewOptions$ = {
                    context: {
                        $implicit: this.hide.bind(this),
                        data: this.data
                    }
                };
            }
        }
        this.viewRef = this.viewService.createView(this.content, {
            vcr: this.vcr,
            ...this.viewOptions$
        });
        // We need to call detectChanges for onPush components to update the content
        if (this.detectChangesComponent && isComponent(this.content)) {
            this.viewRef.detectChanges();
        }
        let content = this.viewRef.getElement();
        if (coerceBooleanInput(this.useTextContent)) {
            content = instance.reference.textContent;
        }
        if (isString(content) && this.globalConfig.beforeRender) {
            content = this.globalConfig.beforeRender(content);
        }
        return content;
    }
    handleContextMenu() {
        fromEvent(this.host, 'contextmenu')
            .pipe(takeUntil(this.destroyed))
            .subscribe((event) => {
            event.preventDefault();
            this.instance.setProps({
                getReferenceClientRect: () => ({
                    width: 0,
                    height: 0,
                    top: event.clientY,
                    bottom: event.clientY,
                    left: event.clientX,
                    right: event.clientX
                })
            });
            this.instance.show();
        });
    }
    handleEscapeButton() {
        this.zone.runOutsideAngular(() => {
            fromEvent(document.body, 'keydown')
                .pipe(filter(({ code }) => code === 'Escape'), takeUntil(merge(this.destroyed, this.visibleInternal.pipe(filter(v => !v)))))
                .subscribe(() => this.hide());
        });
    }
    checkOverflow(isElementOverflow) {
        if (isElementOverflow) {
            if (!this.instance) {
                this.createInstance();
            }
            else {
                this.instance.enable();
            }
        }
        else {
            this.instance?.disable();
        }
    }
    listenToHostResize() {
        dimensionsChanges(this.host)
            .pipe(takeUntil(merge(this.destroyed, this.visibleInternal)))
            .subscribe(() => {
            this.setInstanceWidth(this.instance, this.hostWidth);
        });
    }
    setInstanceWidth(instance, width) {
        const inPixels = coerceCssPixelValue(width);
        instance.popper.style.width = inPixels;
        instance.popper.style.maxWidth = inPixels;
        instance.popper.firstElementChild.style.maxWidth = inPixels;
    }
}
TippyDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: TippyDirective, deps: [{ token: PLATFORM_ID }, { token: TIPPY_CONFIG }, { token: i0.Injector }, { token: i1.ViewService }, { token: i0.ViewContainerRef }, { token: i0.NgZone }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
TippyDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.0.1", type: TippyDirective, isStandalone: true, selector: "[tippy]", inputs: { appendTo: "appendTo", delay: "delay", duration: "duration", hideOnClick: "hideOnClick", interactive: "interactive", interactiveBorder: "interactiveBorder", maxWidth: "maxWidth", offset: "offset", placement: "placement", popperOptions: "popperOptions", showOnCreate: "showOnCreate", trigger: "trigger", triggerTarget: "triggerTarget", zIndex: "zIndex", animation: "animation", useTextContent: "useTextContent", lazy: "lazy", variation: "variation", isEnabled: "isEnabled", className: "className", onlyTextOverflow: "onlyTextOverflow", data: "data", useHostWidth: "useHostWidth", hideOnEscape: "hideOnEscape", detectChangesComponent: "detectChangesComponent", popperWidth: "popperWidth", content: ["tippy", "content"], customHost: ["tippyHost", "customHost"], isVisible: "isVisible" }, outputs: { visible: "visible" }, exportAs: ["tippy"], usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: TippyDirective, decorators: [{
            type: Directive,
            args: [{
                    // eslint-disable-next-line @angular-eslint/directive-selector
                    selector: '[tippy]',
                    exportAs: 'tippy',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TIPPY_CONFIG]
                }] }, { type: i0.Injector }, { type: i1.ViewService }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i0.ElementRef }]; }, propDecorators: { appendTo: [{
                type: Input
            }], delay: [{
                type: Input
            }], duration: [{
                type: Input
            }], hideOnClick: [{
                type: Input
            }], interactive: [{
                type: Input
            }], interactiveBorder: [{
                type: Input
            }], maxWidth: [{
                type: Input
            }], offset: [{
                type: Input
            }], placement: [{
                type: Input
            }], popperOptions: [{
                type: Input
            }], showOnCreate: [{
                type: Input
            }], trigger: [{
                type: Input
            }], triggerTarget: [{
                type: Input
            }], zIndex: [{
                type: Input
            }], animation: [{
                type: Input
            }], useTextContent: [{
                type: Input
            }], lazy: [{
                type: Input
            }], variation: [{
                type: Input
            }], isEnabled: [{
                type: Input
            }], className: [{
                type: Input
            }], onlyTextOverflow: [{
                type: Input
            }], data: [{
                type: Input
            }], useHostWidth: [{
                type: Input
            }], hideOnEscape: [{
                type: Input
            }], detectChangesComponent: [{
                type: Input
            }], popperWidth: [{
                type: Input
            }], content: [{
                type: Input,
                args: ['tippy']
            }], customHost: [{
                type: Input,
                args: ['tippyHost']
            }], visible: [{
                type: Output
            }], isVisible: [{
                type: Input
            }] } });
function isChanged(key, changes) {
    return key in changes;
}
export function coerceBooleanInput(value) {
    return value != null && `${value}` !== 'false';
}
//# sourceMappingURL=data:application/json;base64,