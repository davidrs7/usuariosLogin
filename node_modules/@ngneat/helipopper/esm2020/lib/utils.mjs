import { Observable } from 'rxjs';
import { auditTime, map } from 'rxjs/operators';
import { ElementRef } from '@angular/core';
let supportsIntersectionObserver = false;
let supportsResizeObserver = false;
if (typeof window !== 'undefined') {
    supportsIntersectionObserver = 'IntersectionObserver' in window;
    supportsResizeObserver = 'ResizeObserver' in window;
}
export function inView(host, options = {
    root: null,
    threshold: 0.3
}) {
    const element = coerceElement(host);
    return new Observable(subscriber => {
        if (!supportsIntersectionObserver) {
            subscriber.next();
            subscriber.complete();
            return;
        }
        const observer = new IntersectionObserver(entries => {
            // Several changes may occur in the same tick, we want to check the latest entry state.
            const entry = entries[entries.length - 1];
            if (entry.isIntersecting) {
                subscriber.next();
                subscriber.complete();
            }
        }, options);
        observer.observe(element);
        return () => observer.disconnect();
    });
}
function isElementOverflow(host) {
    // Don't access the `offsetWidth` multipe times since it triggers layout updates.
    const hostOffsetWidth = host.offsetWidth;
    return hostOffsetWidth > host.parentElement.offsetWidth || hostOffsetWidth < host.scrollWidth;
}
export function overflowChanges(host) {
    const element = coerceElement(host);
    return dimensionsChanges(element).pipe(auditTime(150), map(() => isElementOverflow(element)));
}
export function dimensionsChanges(target) {
    return resizeObserverStrategy(target);
}
function resizeObserverStrategy(target) {
    return new Observable(subscriber => {
        if (!supportsResizeObserver) {
            subscriber.next();
            subscriber.complete();
            return;
        }
        const observer = new ResizeObserver(() => subscriber.next(true));
        observer.observe(target);
        return () => observer.disconnect();
    });
}
export function onlyTippyProps(allProps) {
    const tippyProps = {};
    const ownProps = [
        'useTextContent',
        'variations',
        'useHostWidth',
        'defaultVariation',
        'beforeRender',
        'lazy',
        'variation',
        'isEnabled',
        'className',
        'onlyTextOverflow',
        'data',
        'content',
        'context',
        'hideOnEscape',
        'customHost',
        'injector',
        'preserveView',
        'vcr',
        'popperWidth'
    ];
    const overriddenMethods = ['onShow', 'onHidden', 'onCreate'];
    Object.keys(allProps).forEach(prop => {
        if (!ownProps.includes(prop) && !overriddenMethods.includes(prop)) {
            tippyProps[prop] = allProps[prop];
        }
    });
    return tippyProps;
}
export function normalizeClassName(className) {
    const classes = isString(className) ? className.split(' ') : className;
    return classes.map(klass => klass?.trim()).filter(Boolean);
}
export function coerceCssPixelValue(value) {
    if (isNil(value)) {
        return '';
    }
    return typeof value === 'string' ? value : `${value}px`;
}
function isString(value) {
    return typeof value === 'string';
}
function isNil(value) {
    return value === undefined || value === null;
}
function coerceElement(element) {
    return element instanceof ElementRef ? element.nativeElement : element;
}
//# sourceMappingURL=data:application/json;base64,