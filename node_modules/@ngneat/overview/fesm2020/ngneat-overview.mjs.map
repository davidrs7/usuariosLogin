{"version":3,"file":"ngneat-overview.mjs","sources":["../../../../projects/ngneat/overview/src/lib/teleport/teleport.service.ts","../../../../projects/ngneat/overview/src/lib/teleport/teleport-outlet.directive.ts","../../../../projects/ngneat/overview/src/lib/teleport/teleport.module.ts","../../../../projects/ngneat/overview/src/lib/views/comp-ref.ts","../../../../projects/ngneat/overview/src/lib/views/types.ts","../../../../projects/ngneat/overview/src/lib/dynamic-view/dynamic-view.component.ts","../../../../projects/ngneat/overview/src/lib/views/template-ref.ts","../../../../projects/ngneat/overview/src/lib/views/string-ref.ts","../../../../projects/ngneat/overview/src/lib/views/view.ts","../../../../projects/ngneat/overview/src/lib/dynamic-view/dynamic-view.directive.ts","../../../../projects/ngneat/overview/src/public-api.ts","../../../../projects/ngneat/overview/src/ngneat-overview.ts"],"sourcesContent":["import { Injectable, ViewContainerRef } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TeleportService {\n  private outlets = new BehaviorSubject<string>('');\n  private asObservable = this.outlets.asObservable();\n\n  outlet$(name: string) {\n    return this.asObservable.pipe(filter(current => current === name), map(name => this.ports.get(name)));\n  }\n\n  ports = new Map<string, ViewContainerRef>();\n\n  newOutlet(name: string) {\n    this.outlets.next(name);\n  }\n}\n","import { Directive, Input, OnChanges, OnDestroy, SimpleChanges, ViewContainerRef } from '@angular/core';\nimport { TeleportService } from './teleport.service';\n\n@Directive({\n  selector: '[teleportOutlet]',\n})\nexport class TeleportOutletDirective implements OnChanges, OnDestroy {\n  // We could've also used the `ngAcceptInputType`, but it's being deprecated in newer Angular versions.\n  @Input() teleportOutlet: string | null | undefined;\n\n  constructor(private vcr: ViewContainerRef, private service: TeleportService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    // The `teleportOutlet` might be `null|undefined`, but we don't want nullable values to be used\n    // as keys for the `ports` map.\n    if (changes.teleportOutlet && typeof this.teleportOutlet === 'string') {\n      this.service.ports.set(this.teleportOutlet, this.vcr);\n      this.service.newOutlet(this.teleportOutlet);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.service.ports.delete(this.teleportOutlet);\n  }\n}\n","import {\n  Directive,\n  EmbeddedViewRef,\n  Input,\n  NgModule,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  TemplateRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { TeleportService } from './teleport.service';\nimport { TeleportOutletDirective } from './teleport-outlet.directive';\n\n@Directive({\n  selector: '[teleportTo]',\n})\nexport class TeleportDirective implements OnChanges, OnDestroy {\n  @Input() teleportTo: string | null | undefined;\n\n  private viewRef: EmbeddedViewRef<any>;\n  private subscription: Subscription | null = null;\n\n  constructor(private tpl: TemplateRef<any>, private service: TeleportService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.teleportTo && typeof this.teleportTo === 'string') {\n      this.dispose();\n\n      this.subscription = this.service.outlet$(this.teleportTo).subscribe((outlet) => {\n        if (outlet) {\n          this.viewRef = outlet.createEmbeddedView(this.tpl);\n        }\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.dispose();\n  }\n\n  private dispose(): void {\n    this.subscription?.unsubscribe();\n    this.subscription = null;\n    this.viewRef?.destroy();\n  }\n}\n\n@NgModule({\n  declarations: [TeleportDirective, TeleportOutletDirective],\n  exports: [TeleportDirective, TeleportOutletDirective],\n})\nexport class TeleportModule {}\n","import {\n  ApplicationRef,\n  ComponentRef, createComponent,  EnvironmentInjector,\n  Injector,\n  Type,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ExcludeFunctions, ViewRef } from './types';\n\ninterface Options<C> {\n  component: Type<C>;\n  injector: Injector;\n  environmentInjector: EnvironmentInjector;\n  vcr: ViewContainerRef | undefined;\n  appRef: ApplicationRef | undefined;\n}\n\nexport class CompRef<T> implements ViewRef {\n  ref: ComponentRef<T>;\n\n  constructor(private options: Options<T>) {\n    if (options.vcr) {\n      this.ref = options.vcr.createComponent(options.component, {\n        index: options.vcr.length,\n        injector: options.injector || options.vcr.injector,\n      });\n    } else {\n      this.ref = createComponent<T>(options.component, {\n        elementInjector: options.injector,\n        environmentInjector: options.environmentInjector\n      });\n      options.appRef.attachView(this.ref.hostView);\n    }\n  }\n\n  setInput<K extends keyof ExcludeFunctions<T>>(input: K, value: T[K]) {\n    this.ref.instance[input] = value;\n\n    return this;\n  }\n\n  setInputs(inputs: Partial<ExcludeFunctions<T>>) {\n    Object.keys(inputs).forEach((input) => {\n      this.ref.instance[input] = inputs[input];\n    });\n\n    return this;\n  }\n\n  detectChanges() {\n    this.ref.hostView.detectChanges();\n    return this;\n  }\n\n  appendTo(container: Element) {\n    container.appendChild(this.getElement());\n\n    return this;\n  }\n\n  removeFrom(container: Element) {\n    container.removeChild(this.getElement());\n\n    return this;\n  }\n\n  getRawContent() {\n    return this.getElement().outerHTML;\n  }\n\n  getElement<T extends Element>(): T {\n    return this.ref.location.nativeElement;\n  }\n\n  destroy() {\n    this.ref.destroy();\n    !this.options.vcr && this.options.appRef.detachView(this.ref.hostView);\n    this.ref = null;\n  }\n}\n","import { TemplateRef, Type } from '@angular/core';\nimport { CompRef } from './comp-ref';\nimport { StringRef } from './string-ref';\nimport { TplRef } from './template-ref';\n\nexport interface ViewRef {\n  getElement(): Element | string;\n\n  detectChanges(): void;\n\n  destroy(): void;\n}\n\ntype ExcludeFunctionPropertyNames<T> = {\n  [Key in keyof T]: T[Key] extends Function ? never : Key;\n}[keyof T];\n\nexport type ExcludeFunctions<T> = Pick<T, ExcludeFunctionPropertyNames<T>>;\nexport type Content = string | TemplateRef<any> | Type<any>;\nexport type ResolveViewRef<T> = T extends Type<infer Instance> ? CompRef<Instance>\n  : T extends TemplateRef<infer Context> ? TplRef<Context> : StringRef;\n\nexport function isTemplateRef(value: any): value is TemplateRef<any> {\n  return value instanceof TemplateRef;\n}\n\nexport function isComponent(value: any): value is Type<any> {\n  return typeof value === 'function';\n}\n\nexport function isString(value: any): value is string {\n  return typeof value === 'string';\n}\n\nexport function getViewRef<T>(value: CompRef<T> | TplRef<T>) {\n  return value instanceof CompRef ? value.ref.hostView : value.ref;\n}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'dynamic-view',\n  template: ` <div [innerHTML]=\"content\"></div> `,\n})\nexport class DynamicViewComponent {\n  @Input() content: string;\n}\n","import {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  EmbeddedViewRef,\n  Injector,\n  TemplateRef,\n  Type,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ViewRef } from './types';\n\ninterface Args<C> {\n  tpl: TemplateRef<C>;\n  context: C;\n  vcr: ViewContainerRef | undefined;\n  appRef: ApplicationRef | undefined;\n  injector: Injector | undefined;\n}\n\nexport class TplRef<C> implements ViewRef {\n  ref: EmbeddedViewRef<{}>;\n  private element: Element;\n\n  constructor(private args: Args<C>) {\n    if (this.args.vcr) {\n      this.ref = this.args.vcr.createEmbeddedView(this.args.tpl, this.args.context || {}, { injector: args.injector });\n      this.ref.detectChanges();\n    } else {\n      this.ref = this.args.tpl.createEmbeddedView(this.args.context || ({} as C), args.injector);\n      this.ref.detectChanges();\n      this.args.appRef.attachView(this.ref);\n    }\n  }\n\n  detectChanges() {\n    this.ref.detectChanges();\n  }\n\n  getElement(): Element {\n    const rootNodes = this.ref.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0] === Node.ELEMENT_NODE) {\n      this.element = rootNodes[0];\n    } else {\n      this.element = document.createElement('div');\n      this.element.append(...rootNodes);\n    }\n\n    return this.element;\n  }\n\n  destroy() {\n    if (this.ref.rootNodes[0] !== 1) {\n      this.element?.parentNode.removeChild(this.element);\n      this.element = null;\n    }\n\n    if (!this.args.vcr) {\n      this.args.appRef.detachView(this.ref);\n    }\n\n    this.ref.destroy();\n    this.ref = null;\n  }\n}\n","import { ViewRef } from './types';\n\nexport class StringRef implements ViewRef {\n  constructor(private value: string) {}\n\n  getElement(): string {\n    return this.value;\n  }\n\n  detectChanges() {}\n\n  destroy() {}\n}\n","import {\n  ApplicationRef, EnvironmentInjector,\n  inject,\n  Injectable, InjectionToken,\n  Injector,\n  TemplateRef,\n  Type,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Content, isComponent, isString, isTemplateRef, ViewRef} from './types';\nimport { TplRef } from './template-ref';\nimport { StringRef } from './string-ref';\nimport { CompRef } from './comp-ref';\n\ninterface _ViewOptions {\n  vcr?: ViewContainerRef | undefined;\n  injector?: Injector | undefined;\n}\n\ninterface TemplateViewOptions extends _ViewOptions {\n  context?: Record<string, any> | undefined;\n}\n\ninterface CompViewOptions<Context = any> extends _ViewOptions {\n  environmentInjector?: EnvironmentInjector | undefined;\n  context?: Context | undefined;\n}\n\nexport type ViewOptions = _ViewOptions & CompViewOptions & TemplateViewOptions;\n\nexport const VIEW_CONTEXT = new InjectionToken<Record<string, any>>('Component context');\n\n@Injectable({ providedIn: 'root' })\nexport class ViewService {\n  private injector = inject(Injector);\n  private appRef = inject(ApplicationRef);\n  private environmentInjector = inject(EnvironmentInjector);\n\n  createComponent<Comp, Context>(component: Type<Comp>, options: CompViewOptions<Context> = {}) {\n    let injector = options.injector || this.injector;\n\n    if (options.context) {\n      injector = Injector.create({\n        providers: [{\n          provide: VIEW_CONTEXT,\n          useValue: options.context\n        }],\n        parent: injector\n      });\n    }\n\n    return new CompRef<Comp>({\n      component,\n      vcr: options.vcr,\n      injector,\n      appRef: this.appRef,\n      environmentInjector: options.environmentInjector || this.environmentInjector\n    });\n  }\n\n  createTemplate<Context>(tpl: TemplateRef<Context>, options: TemplateViewOptions = {}) {\n    return new TplRef({\n      vcr: options.vcr,\n      appRef: this.appRef,\n      tpl,\n      context: options.context,\n      injector: options.injector\n    });\n  }\n\n  createView<T>(content: Type<T>, viewOptions: CompViewOptions): CompRef<T>;\n  createView<T>(content: TemplateRef<T>, viewOptions: TemplateViewOptions): TplRef<T>;\n  createView(content: string): StringRef;\n  createView(content: Content, viewOptions?: ViewOptions): ViewRef;\n  createView<T extends Content>(content: T, viewOptions: ViewOptions = {}): ViewRef {\n    if (isTemplateRef(content)) {\n      return this.createTemplate(content, viewOptions);\n    } else if (isComponent(content)) {\n      return this.createComponent(content, viewOptions);\n    } else if (isString(content)) {\n      return new StringRef(content);\n    } else {\n      throw 'Type of content is not supported';\n    }\n  }\n}\n\nexport function injectViewContext<T>() {\n  return inject(VIEW_CONTEXT) as T;\n}\n","import {\n  Directive,\n  Injector,\n  Input,\n  NgModule,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Content, ViewRef, isString } from '../views/types';\nimport { ViewService } from '../views/view';\nimport { CompRef } from '../views/comp-ref';\nimport { DynamicViewComponent } from './dynamic-view.component';\n\n@Directive({\n  selector: '[dynamicView]',\n})\nexport class DynamicViewDirective implements OnInit, OnChanges, OnDestroy {\n  @Input('dynamicView') view: Content;\n  @Input('dynamicViewInjector') injector: Injector;\n  @Input('dynamicViewContext') context: any;\n\n  private viewRef: ViewRef;\n\n  constructor(private defaultTpl: TemplateRef<any>, private vcr: ViewContainerRef, private viewService: ViewService) {}\n\n  ngOnInit() {\n    this.resolveContentType();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.view && !changes.view.isFirstChange()) {\n      this.resolveContentType();\n    }\n  }\n\n  resolveContentType() {\n    this.viewRef?.destroy();\n    if (isString(this.view)) {\n      this.viewRef = this.viewService.createComponent(DynamicViewComponent, {\n        vcr: this.vcr,\n        injector: this.injector,\n      });\n      (this.viewRef as CompRef<DynamicViewComponent>).setInput('content', this.view).detectChanges();\n    } else {\n      this.viewRef = this.viewService.createView(this.view || this.defaultTpl, {\n        vcr: this.vcr,\n        injector: this.injector ?? this.vcr.injector,\n        context: this.context,\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.viewRef?.destroy();\n  }\n}\n\n@NgModule({\n  declarations: [DynamicViewDirective, DynamicViewComponent],\n  exports: [DynamicViewDirective],\n})\nexport class DynamicViewModule {}\n","/*\n * Public API Surface of overview\n */\nexport { TeleportModule, TeleportDirective } from './lib/teleport/teleport.module';\nexport { TeleportOutletDirective } from './lib/teleport/teleport-outlet.directive';\nexport { DynamicViewModule, DynamicViewDirective } from './lib/dynamic-view/dynamic-view.directive';\nexport { StringRef } from './lib/views/string-ref';\nexport { CompRef } from './lib/views/comp-ref';\nexport { TplRef } from './lib/views/template-ref';\nexport { injectViewContext, ViewService, ViewOptions } from './lib/views/view';\nexport { getViewRef, isComponent, isTemplateRef, Content, isString, ViewRef, ResolveViewRef } from './lib/views/types';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.TeleportService","i1.ViewService"],"mappings":"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"}