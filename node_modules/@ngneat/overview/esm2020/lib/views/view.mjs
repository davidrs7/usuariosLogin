import { ApplicationRef, EnvironmentInjector, inject, Injectable, InjectionToken, Injector, } from '@angular/core';
import { isComponent, isString, isTemplateRef } from './types';
import { TplRef } from './template-ref';
import { StringRef } from './string-ref';
import { CompRef } from './comp-ref';
import * as i0 from "@angular/core";
export const VIEW_CONTEXT = new InjectionToken('Component context');
export class ViewService {
    constructor() {
        this.injector = inject(Injector);
        this.appRef = inject(ApplicationRef);
        this.environmentInjector = inject(EnvironmentInjector);
    }
    createComponent(component, options = {}) {
        let injector = options.injector || this.injector;
        if (options.context) {
            injector = Injector.create({
                providers: [{
                        provide: VIEW_CONTEXT,
                        useValue: options.context
                    }],
                parent: injector
            });
        }
        return new CompRef({
            component,
            vcr: options.vcr,
            injector,
            appRef: this.appRef,
            environmentInjector: options.environmentInjector || this.environmentInjector
        });
    }
    createTemplate(tpl, options = {}) {
        return new TplRef({
            vcr: options.vcr,
            appRef: this.appRef,
            tpl,
            context: options.context,
            injector: options.injector
        });
    }
    createView(content, viewOptions = {}) {
        if (isTemplateRef(content)) {
            return this.createTemplate(content, viewOptions);
        }
        else if (isComponent(content)) {
            return this.createComponent(content, viewOptions);
        }
        else if (isString(content)) {
            return new StringRef(content);
        }
        else {
            throw 'Type of content is not supported';
        }
    }
}
ViewService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ViewService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
ViewService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ViewService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ViewService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
export function injectViewContext() {
    return inject(VIEW_CONTEXT);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nbmVhdC9vdmVydmlldy9zcmMvbGliL3ZpZXdzL3ZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLGNBQWMsRUFBRSxtQkFBbUIsRUFDbkMsTUFBTSxFQUNOLFVBQVUsRUFBRSxjQUFjLEVBQzFCLFFBQVEsR0FJVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQVUsV0FBVyxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQVUsTUFBTSxTQUFTLENBQUM7QUFDL0UsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDekMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQzs7QUFrQnJDLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxJQUFJLGNBQWMsQ0FBc0IsbUJBQW1CLENBQUMsQ0FBQztBQUd6RixNQUFNLE9BQU8sV0FBVztJQUR4QjtRQUVVLGFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDNUIsV0FBTSxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNoQyx3QkFBbUIsR0FBRyxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQztLQWlEM0Q7SUEvQ0MsZUFBZSxDQUFnQixTQUFxQixFQUFFLFVBQW9DLEVBQUU7UUFDMUYsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDO1FBRWpELElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTtZQUNuQixRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQztnQkFDekIsU0FBUyxFQUFFLENBQUM7d0JBQ1YsT0FBTyxFQUFFLFlBQVk7d0JBQ3JCLFFBQVEsRUFBRSxPQUFPLENBQUMsT0FBTztxQkFDMUIsQ0FBQztnQkFDRixNQUFNLEVBQUUsUUFBUTthQUNqQixDQUFDLENBQUM7U0FDSjtRQUVELE9BQU8sSUFBSSxPQUFPLENBQU87WUFDdkIsU0FBUztZQUNULEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRztZQUNoQixRQUFRO1lBQ1IsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ25CLG1CQUFtQixFQUFFLE9BQU8sQ0FBQyxtQkFBbUIsSUFBSSxJQUFJLENBQUMsbUJBQW1CO1NBQzdFLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxjQUFjLENBQVUsR0FBeUIsRUFBRSxVQUErQixFQUFFO1FBQ2xGLE9BQU8sSUFBSSxNQUFNLENBQUM7WUFDaEIsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHO1lBQ2hCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNuQixHQUFHO1lBQ0gsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPO1lBQ3hCLFFBQVEsRUFBRSxPQUFPLENBQUMsUUFBUTtTQUMzQixDQUFDLENBQUM7SUFDTCxDQUFDO0lBTUQsVUFBVSxDQUFvQixPQUFVLEVBQUUsY0FBMkIsRUFBRTtRQUNyRSxJQUFJLGFBQWEsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUMxQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1NBQ2xEO2FBQU0sSUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDL0IsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsQ0FBQztTQUNuRDthQUFNLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQzVCLE9BQU8sSUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDL0I7YUFBTTtZQUNMLE1BQU0sa0NBQWtDLENBQUM7U0FDMUM7SUFDSCxDQUFDOzt3R0FuRFUsV0FBVzs0R0FBWCxXQUFXLGNBREUsTUFBTTsyRkFDbkIsV0FBVztrQkFEdkIsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7O0FBdURsQyxNQUFNLFVBQVUsaUJBQWlCO0lBQy9CLE9BQU8sTUFBTSxDQUFDLFlBQVksQ0FBTSxDQUFDO0FBQ25DLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBcHBsaWNhdGlvblJlZiwgRW52aXJvbm1lbnRJbmplY3RvcixcbiAgaW5qZWN0LFxuICBJbmplY3RhYmxlLCBJbmplY3Rpb25Ub2tlbixcbiAgSW5qZWN0b3IsXG4gIFRlbXBsYXRlUmVmLFxuICBUeXBlLFxuICBWaWV3Q29udGFpbmVyUmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Q29udGVudCwgaXNDb21wb25lbnQsIGlzU3RyaW5nLCBpc1RlbXBsYXRlUmVmLCBWaWV3UmVmfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IFRwbFJlZiB9IGZyb20gJy4vdGVtcGxhdGUtcmVmJztcbmltcG9ydCB7IFN0cmluZ1JlZiB9IGZyb20gJy4vc3RyaW5nLXJlZic7XG5pbXBvcnQgeyBDb21wUmVmIH0gZnJvbSAnLi9jb21wLXJlZic7XG5cbmludGVyZmFjZSBfVmlld09wdGlvbnMge1xuICB2Y3I/OiBWaWV3Q29udGFpbmVyUmVmIHwgdW5kZWZpbmVkO1xuICBpbmplY3Rvcj86IEluamVjdG9yIHwgdW5kZWZpbmVkO1xufVxuXG5pbnRlcmZhY2UgVGVtcGxhdGVWaWV3T3B0aW9ucyBleHRlbmRzIF9WaWV3T3B0aW9ucyB7XG4gIGNvbnRleHQ/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+IHwgdW5kZWZpbmVkO1xufVxuXG5pbnRlcmZhY2UgQ29tcFZpZXdPcHRpb25zPENvbnRleHQgPSBhbnk+IGV4dGVuZHMgX1ZpZXdPcHRpb25zIHtcbiAgZW52aXJvbm1lbnRJbmplY3Rvcj86IEVudmlyb25tZW50SW5qZWN0b3IgfCB1bmRlZmluZWQ7XG4gIGNvbnRleHQ/OiBDb250ZXh0IHwgdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgdHlwZSBWaWV3T3B0aW9ucyA9IF9WaWV3T3B0aW9ucyAmIENvbXBWaWV3T3B0aW9ucyAmIFRlbXBsYXRlVmlld09wdGlvbnM7XG5cbmV4cG9ydCBjb25zdCBWSUVXX0NPTlRFWFQgPSBuZXcgSW5qZWN0aW9uVG9rZW48UmVjb3JkPHN0cmluZywgYW55Pj4oJ0NvbXBvbmVudCBjb250ZXh0Jyk7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgVmlld1NlcnZpY2Uge1xuICBwcml2YXRlIGluamVjdG9yID0gaW5qZWN0KEluamVjdG9yKTtcbiAgcHJpdmF0ZSBhcHBSZWYgPSBpbmplY3QoQXBwbGljYXRpb25SZWYpO1xuICBwcml2YXRlIGVudmlyb25tZW50SW5qZWN0b3IgPSBpbmplY3QoRW52aXJvbm1lbnRJbmplY3Rvcik7XG5cbiAgY3JlYXRlQ29tcG9uZW50PENvbXAsIENvbnRleHQ+KGNvbXBvbmVudDogVHlwZTxDb21wPiwgb3B0aW9uczogQ29tcFZpZXdPcHRpb25zPENvbnRleHQ+ID0ge30pIHtcbiAgICBsZXQgaW5qZWN0b3IgPSBvcHRpb25zLmluamVjdG9yIHx8IHRoaXMuaW5qZWN0b3I7XG5cbiAgICBpZiAob3B0aW9ucy5jb250ZXh0KSB7XG4gICAgICBpbmplY3RvciA9IEluamVjdG9yLmNyZWF0ZSh7XG4gICAgICAgIHByb3ZpZGVyczogW3tcbiAgICAgICAgICBwcm92aWRlOiBWSUVXX0NPTlRFWFQsXG4gICAgICAgICAgdXNlVmFsdWU6IG9wdGlvbnMuY29udGV4dFxuICAgICAgICB9XSxcbiAgICAgICAgcGFyZW50OiBpbmplY3RvclxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBDb21wUmVmPENvbXA+KHtcbiAgICAgIGNvbXBvbmVudCxcbiAgICAgIHZjcjogb3B0aW9ucy52Y3IsXG4gICAgICBpbmplY3RvcixcbiAgICAgIGFwcFJlZjogdGhpcy5hcHBSZWYsXG4gICAgICBlbnZpcm9ubWVudEluamVjdG9yOiBvcHRpb25zLmVudmlyb25tZW50SW5qZWN0b3IgfHwgdGhpcy5lbnZpcm9ubWVudEluamVjdG9yXG4gICAgfSk7XG4gIH1cblxuICBjcmVhdGVUZW1wbGF0ZTxDb250ZXh0Pih0cGw6IFRlbXBsYXRlUmVmPENvbnRleHQ+LCBvcHRpb25zOiBUZW1wbGF0ZVZpZXdPcHRpb25zID0ge30pIHtcbiAgICByZXR1cm4gbmV3IFRwbFJlZih7XG4gICAgICB2Y3I6IG9wdGlvbnMudmNyLFxuICAgICAgYXBwUmVmOiB0aGlzLmFwcFJlZixcbiAgICAgIHRwbCxcbiAgICAgIGNvbnRleHQ6IG9wdGlvbnMuY29udGV4dCxcbiAgICAgIGluamVjdG9yOiBvcHRpb25zLmluamVjdG9yXG4gICAgfSk7XG4gIH1cblxuICBjcmVhdGVWaWV3PFQ+KGNvbnRlbnQ6IFR5cGU8VD4sIHZpZXdPcHRpb25zOiBDb21wVmlld09wdGlvbnMpOiBDb21wUmVmPFQ+O1xuICBjcmVhdGVWaWV3PFQ+KGNvbnRlbnQ6IFRlbXBsYXRlUmVmPFQ+LCB2aWV3T3B0aW9uczogVGVtcGxhdGVWaWV3T3B0aW9ucyk6IFRwbFJlZjxUPjtcbiAgY3JlYXRlVmlldyhjb250ZW50OiBzdHJpbmcpOiBTdHJpbmdSZWY7XG4gIGNyZWF0ZVZpZXcoY29udGVudDogQ29udGVudCwgdmlld09wdGlvbnM/OiBWaWV3T3B0aW9ucyk6IFZpZXdSZWY7XG4gIGNyZWF0ZVZpZXc8VCBleHRlbmRzIENvbnRlbnQ+KGNvbnRlbnQ6IFQsIHZpZXdPcHRpb25zOiBWaWV3T3B0aW9ucyA9IHt9KTogVmlld1JlZiB7XG4gICAgaWYgKGlzVGVtcGxhdGVSZWYoY29udGVudCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVRlbXBsYXRlKGNvbnRlbnQsIHZpZXdPcHRpb25zKTtcbiAgICB9IGVsc2UgaWYgKGlzQ29tcG9uZW50KGNvbnRlbnQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5jcmVhdGVDb21wb25lbnQoY29udGVudCwgdmlld09wdGlvbnMpO1xuICAgIH0gZWxzZSBpZiAoaXNTdHJpbmcoY29udGVudCkpIHtcbiAgICAgIHJldHVybiBuZXcgU3RyaW5nUmVmKGNvbnRlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyAnVHlwZSBvZiBjb250ZW50IGlzIG5vdCBzdXBwb3J0ZWQnO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5qZWN0Vmlld0NvbnRleHQ8VD4oKSB7XG4gIHJldHVybiBpbmplY3QoVklFV19DT05URVhUKSBhcyBUO1xufVxuIl19