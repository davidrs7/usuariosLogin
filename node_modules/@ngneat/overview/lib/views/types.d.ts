import { TemplateRef, Type } from '@angular/core';
import { CompRef } from './comp-ref';
import { StringRef } from './string-ref';
import { TplRef } from './template-ref';
export interface ViewRef {
    getElement(): Element | string;
    detectChanges(): void;
    destroy(): void;
}
declare type ExcludeFunctionPropertyNames<T> = {
    [Key in keyof T]: T[Key] extends Function ? never : Key;
}[keyof T];
export declare type ExcludeFunctions<T> = Pick<T, ExcludeFunctionPropertyNames<T>>;
export declare type Content = string | TemplateRef<any> | Type<any>;
export declare type ResolveViewRef<T> = T extends Type<infer Instance> ? CompRef<Instance> : T extends TemplateRef<infer Context> ? TplRef<Context> : StringRef;
export declare function isTemplateRef(value: any): value is TemplateRef<any>;
export declare function isComponent(value: any): value is Type<any>;
export declare function isString(value: any): value is string;
export declare function getViewRef<T>(value: CompRef<T> | TplRef<T>): import("@angular/core").ViewRef;
export {};
