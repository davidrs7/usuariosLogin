import { ApplicationRef, ComponentRef, EnvironmentInjector, Injector, Type, ViewContainerRef } from '@angular/core';
import { ExcludeFunctions, ViewRef } from './types';
interface Options<C> {
    component: Type<C>;
    injector: Injector;
    environmentInjector: EnvironmentInjector;
    vcr: ViewContainerRef | undefined;
    appRef: ApplicationRef | undefined;
}
export declare class CompRef<T> implements ViewRef {
    private options;
    ref: ComponentRef<T>;
    constructor(options: Options<T>);
    setInput<K extends keyof ExcludeFunctions<T>>(input: K, value: T[K]): this;
    setInputs(inputs: Partial<ExcludeFunctions<T>>): this;
    detectChanges(): this;
    appendTo(container: Element): this;
    removeFrom(container: Element): this;
    getRawContent(): string;
    getElement<T extends Element>(): T;
    destroy(): void;
}
export {};
